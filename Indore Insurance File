library(dplyr)
library(car)
library(ggplot2)
library(summarytools)
library(lubridate)
library(MASS)
setwd("D:\\Business Analytics\\Keggle\\Logistic regression Assignment")

main=read.csv("loan_details_train.csv",header=T, na.strings="") ## replace the blanks as NA
test=read.csv("loan_details_test.csv",header = T,na.strings = "")
dfSummary(main)
dfSummary(test)
colSums(is.na(main))
colSums(is.na(test))
attach(main)
## for main data
main$region=as.factor(main$region)
main$Employment.Type=as.factor(main$Employment.Type)
summary(main$Employment.Type)
## for test data
test$region=as.factor(test$region)
test$Employment.Type=as.factor(test$Employment.Type)

'mosaicplot(table(main$Employment.Type, main$default),
           color = TRUE,
           xlab = "Employment type", # label for x-axis
           ylab = "Fraud" # label for y-axis
)'

dfSummary(main$Employment.Type)

library(statip) ## for filling the missing values for main data

main$Employment.Type[is.na(main$Employment.Type)]=mfv(main$Employment.Type[!is.na(main$Employment.Type)])

dfSummary(main$Employment.Type)

## for filling the missing values for test data

test$Employment.Type[is.na(test$Employment.Type)]=mfv(test$Employment.Type[!is.na(test$Employment.Type)])

dfSummary(test$Employment.Type)

## changing Date from char to date format for main data
main$Date.of.Birth<-as.Date(main$Date.of.Birth, "%d-%m-%Y")
main$DisbursalDate<-as.Date(main$DisbursalDate, "%d-%m-%Y")

## converting it into the year for main data
main$Date.of.Birth <- format(main$Date.of.Birth,"%Y")
main$DisbursalDate<-format(main$DisbursalDate, "%Y")
## converting it to the integer format for main data
main$Date.of.Birth <- as.integer(main$Date.of.Birth)
main$DisbursalDate<-as.integer(main$DisbursalDate)
### calculated age at the point of disbursal date
main=main%>%mutate(age=DisbursalDate-Date.of.Birth,.after=Date.of.Birth)

### creating the age and score Bin in data
summary(main$age)
main$Agerange <- cut(main$age, c(seq(15,65, by = 10), Inf), include.lowest = TRUE)
main$cns.score.range=cut(main$PERFORM_CNS.SCORE, c(seq(0,1000, by = 100), Inf), 
                         include.lowest = TRUE)
summary(asset_cost)
main$asset_range=cut(main$asset_cost, c(seq(0,1000000, by = 50000), Inf),
                     include.lowest = TRUE)
summary(disbursed_amount)
main$disbursed_amountrange=cut(main$disbursed_amount, c(seq(0,600000, by = 100000), Inf),
                     include.lowest = TRUE)
#for test data
test$Agerange=cut(test$age, c(seq(15,65, by = 10), Inf), include.lowest = TRUE)
test$cns.score.range=cut(test$PERFORM_CNS.SCORE, c(seq(0,1000, by = 100), Inf), 
                         include.lowest = TRUE)
test$asset_range=cut(test$asset_cost, c(seq(0,1000000, by = 50000), Inf),
                     include.lowest = TRUE)
test$disbursed_amountrange=cut(test$disbursed_amount, c(seq(0,600000, by = 100000), Inf),
                          include.lowest = TRUE)
'mosaicplot(table(main$default,main$age),
           color = TRUE,
           xlab = "age", # label for x-axis
           ylab = "Fraud" # label for y-axis
)'


ggplot(data=main, aes(main$disbursed_amount)) +
  geom_histogram(aes(y =..density..), fill = "orange") +
  geom_density()
boxplot(disbursed_amount)
summary(disbursed_amount)

## changing Date from char to date format for test data
test$Date.of.Birth<-as.Date(test$Date.of.Birth, "%d-%m-%Y")
test$DisbursalDate<-as.Date(test$DisbursalDate, "%d-%m-%Y")

## converting it into the year for test data
test$Date.of.Birth <- format(test$Date.of.Birth,"%Y")
test$DisbursalDate<-format(test$DisbursalDate, "%Y")
## converting it to the integer format for test data
test$Date.of.Birth <- as.integer(test$Date.of.Birth)
test$DisbursalDate<-as.integer(test$DisbursalDate)
### calculated age at the point of disbursal date for test data
test$age=test$DisbursalDate-test$Date.of.Birth
test <- test %>% relocate(test$age, .after = test$DisbursalDate)


library(stringr)

#Deriving credit history in months from credit history character column - main Data

#head(train$CREDIT.HISTORY.LENGTH)

main_CH_Years<-str_extract(main$CREDIT.HISTORY.LENGTH,"(\\d)(?=yrs)")

#head(main_CH_Years)

main_CH_Years <- as.numeric(main_CH_Years)

main_CH_Months<-str_extract(main$CREDIT.HISTORY.LENGTH,"(\\d)+(?=mon)")

#head(main_CH_Months)

main_CH_Months <- as.numeric(main_CH_Months)

main$CreHisMonths <- 12*main_CH_Years + main_CH_Months
##removing the mon from crehismonth

main$CreHisMonths <- gsub("mon", "", main$CreHisMonths)

main$CreHisMonths <- as.numeric(main$CreHisMonths)


test$CreHisMonths <- gsub("mon", "", test$CreHisMonths)

test$CreHisMonths <- as.numeric(test$CreHisMonths)
#Deriving credit history in months from credit history character column - test Data

#head(train$CREDIT.HISTORY.LENGTH)

test_CH_Years<-str_extract(test$CREDIT.HISTORY.LENGTH,"(\\d)(?=yrs)")

#head(main_CH_Years)

test_CH_Years <- as.numeric(test_CH_Years)

test_CH_Months<-str_extract(test$CREDIT.HISTORY.LENGTH,"(\\d)+(?=mon)")

#head(main_CH_Months)

test_CH_Months <- as.numeric(test_CH_Months)

test$CreHisMonths <- 12*test_CH_Years + test_CH_Months
##removing the mon from crehismonth

test$CreHisMonths <- gsub("mon", "", test$CreHisMonths)

test$CreHisMonths <- as.numeric(test$CreHisMonths)


test$CreHisMonths <- gsub("mon", "", test$CreHisMonths)

test$CreHisMonths <- as.numeric(test$CreHisMonths)
####################################################################
boxplot(scale(ltv))
hist(ltv)
boxplot(disbursed_amount)
hist(disbursed_amount)
boxplot(DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS)
hist(DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS)
### creating the logistic regression
library(caret)

library(car)

library(ROCR)

fit1 <- glm(formula = default ~ disbursed_amount + CreHisMonths + scale(NO.OF_INQUIRIES) + 
              DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS + region + branch_id + 
              scale(ltv) + age + cns.score.range + asset_range, family = "binomial", 
            data = main)
summary(fit1)

vif(fit1)

mymodel=stepAIC(fit1)
summary(mymodel)

predicted<-predict(fit1,type="response")
str(predicted)
predicted<- ifelse(predicted>=0.22,1,0)
table=table(main$default,predicted)
table
1 - sum(diag(table)) / sum(table)

pred_ROCR <- prediction(predicted, main$default)

roc_ROCR <- performance(pred_ROCR, measure = "tpr", x.measure = "fpr")



plot(roc_ROCR, main = "ROC curve", colorize = T)


abline(a = 0, b = 1)



auc_ROCR <- performance(pred_ROCR, measure = "auc")

auc_ROCR <- auc_ROCR@y.values[[1]]

auc_ROCR

predicted_test<-predict(fit1,type="response",newdata=test)

summary(predicted_test)

predicted_test<- ifelse(predicted_test>=0.22,1,0)

(table(test$default,predicted_test))

pred_ROCR_test <- prediction(predicted_test, test$default)

roc_ROCR_test <- performance(pred_ROCR_test, measure = "tpr", x.measure = "fpr")

plot(roc_ROCR_test, main = "ROC curve", colorize = T)

abline(a = 0, b = 1)


auc_ROCR <- performance(pred_ROCR_test, measure = "auc")

auc_ROCR_test <- auc_ROCR@y.values[[1]]

auc_ROCR_test

PredictedProb<-predict(fit1,type="response",newdata=test)



Submission 

submission <- read.csv("loan_details_sample.csv",header = T,na.strings = "")

submission$default <- PredictedProb

head(submission)
